!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	deps/inch_ex/lib/mix/tasks/inchci_add.ex	/^defmodule Mix.Tasks.Inchci.Add do$/;"	m
Autolink	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^defmodule ExDoc.Formatter.HTML.Autolink do$/;"	m
Blank	deps/earmark/lib/earmark/line.ex	/^  defmodule Blank,        do: defstruct line: "", content: "", inside_code: false$/;"	m
Block	deps/earmark/lib/earmark/block.ex	/^defmodule Earmark.Block do$/;"	m
BlockQuote	deps/earmark/lib/earmark/block.ex	/^  defmodule BlockQuote,  do: defstruct attrs: nil, blocks: []$/;"	m
BlockQuote	deps/earmark/lib/earmark/line.ex	/^  defmodule BlockQuote,   do: defstruct line: "", content: "text", inside_code: false$/;"	m
CLI	deps/earmark/lib/earmark/cli.ex	/^defmodule Earmark.CLI do$/;"	m
CLI	deps/ex_doc/lib/ex_doc/cli.ex	/^defmodule ExDoc.CLI do$/;"	m
Cmark	deps/ex_doc/lib/ex_doc/markdown/cmark.ex	/^defmodule ExDoc.Markdown.Cmark do$/;"	m
Code	deps/earmark/lib/earmark/block.ex	/^  defmodule Code,        do: defstruct attrs: nil, lines:  [], language: nil$/;"	m
Config	deps/ex_doc/lib/ex_doc.ex	/^  defmodule Config do$/;"	m
Config	deps/inch_ex/lib/inch_ex.ex	/^  defmodule Config do$/;"	m
Context	deps/earmark/lib/earmark/context.ex	/^defmodule Earmark.Context do$/;"	m
Decode	deps/poison/lib/poison/decoder.ex	/^defmodule Poison.Decode do$/;"	m
Decoder	deps/poison/lib/poison/decoder.ex	/^defimpl Poison.Decoder, for: Any do$/;"	i
Decoder	deps/poison/lib/poison/decoder.ex	/^defprotocol Poison.Decoder do$/;"	p
Docs	deps/ex_doc/lib/mix/tasks/docs.ex	/^defmodule Mix.Tasks.Docs do$/;"	m
Earmark	deps/earmark/lib/earmark.ex	/^defmodule Earmark do$/;"	m
Earmark	deps/ex_doc/lib/ex_doc/markdown/earmark.ex	/^defmodule ExDoc.Markdown.Earmark do$/;"	m
EarmarkError	deps/earmark/lib/earmark/html_renderer.ex	/^  defmodule EarmarkError do$/;"	m
Encode	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.Encode do$/;"	m
EncodeError	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.EncodeError do$/;"	m
Encoder	deps/poison/lib/poison/encoder.ex	/^      defimpl Poison.Encoder, for: unquote(module) do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Any do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Atom do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: BitString do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Float do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: HashDict do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Integer do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: List do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Map do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: [Range, Stream, HashSet] do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defprotocol Poison.Encoder do$/;"	p
Env	deps/inch_ex/lib/inch_ex/env.ex	/^defmodule InchEx.Env do$/;"	m
Error	deps/ex_doc/lib/ex_doc/retriever.ex	/^defmodule ExDoc.Retriever.Error do$/;"	m
Error	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^defmodule InchEx.Docs.Retriever.Error do$/;"	m
ExDoc	deps/ex_doc/lib/ex_doc.ex	/^defmodule ExDoc do$/;"	m
Exkanji	lib/exkanji.ex	/^defmodule Exkanji do$/;"	m
ExkanjiTest	test/exkanji_test.exs	/^defmodule ExkanjiTest do$/;"	m
Exromaji	deps/exromaji/lib/exromaji.ex	/^defmodule Exromaji do$/;"	m
Fence	deps/earmark/lib/earmark/line.ex	/^  defmodule Fence,        do: defstruct line: "", delimiter: "~ or `", language: nil , inside_code: false$/;"	m
FnDef	deps/earmark/lib/earmark/block.ex	/^  defmodule FnDef,       do: defstruct attrs: nil, id: nil, number: nil, blocks: []$/;"	m
FnDef	deps/earmark/lib/earmark/line.ex	/^  defmodule FnDef,        do: defstruct line: "", id: nil, content: "text", inside_code: false$/;"	m
FnList	deps/earmark/lib/earmark/block.ex	/^  defmodule FnList,      do: defstruct attrs: ".footnotes", blocks: []$/;"	m
Formatter	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^defmodule InchEx.Docs.Formatter do$/;"	m
FunctionNode	deps/ex_doc/lib/ex_doc/retriever.ex	/^defmodule ExDoc.FunctionNode do$/;"	m
FunctionObject	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^defmodule InchEx.FunctionObject do$/;"	m
Git	deps/inch_ex/lib/inch_ex/git.ex	/^defmodule InchEx.Git do$/;"	m
GitHub	deps/inch_ex/lib/inch_ex/git_hub.ex	/^defmodule InchEx.GitHub do$/;"	m
HTML	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^defmodule ExDoc.Formatter.HTML do$/;"	m
Heading	deps/earmark/lib/earmark/block.ex	/^  defmodule Heading,     do: defstruct attrs: nil, content: nil, level: nil$/;"	m
Heading	deps/earmark/lib/earmark/line.ex	/^  defmodule Heading,      do: defstruct line: "", level: 1, content: "inline text", inside_code: false$/;"	m
Helper	deps/inch_ex/lib/inch_ex.ex	/^  defmodule Helper do$/;"	m
Helpers	deps/earmark/lib/earmark/helpers.ex	/^defmodule Earmark.Helpers do$/;"	m
Hoedown	deps/ex_doc/lib/ex_doc/markdown/hoedown.ex	/^defmodule ExDoc.Markdown.Hoedown do$/;"	m
Html	deps/earmark/lib/earmark/block.ex	/^  defmodule Html,        do: defstruct attrs: nil, html:   [], tag: nil$/;"	m
HtmlCloseTag	deps/earmark/lib/earmark/line.ex	/^  defmodule HtmlCloseTag, do: defstruct line: "", tag: "<... to eol", inside_code: false$/;"	m
HtmlComment	deps/earmark/lib/earmark/line.ex	/^  defmodule HtmlComment,  do: defstruct line: "", complete: true, inside_code: false$/;"	m
HtmlOneLine	deps/earmark/lib/earmark/line.ex	/^  defmodule HtmlOneLine,  do: defstruct line: "", tag: "", content: "", inside_code: false$/;"	m
HtmlOpenTag	deps/earmark/lib/earmark/line.ex	/^  defmodule HtmlOpenTag,  do: defstruct line: "", tag: "", content: "", inside_code: false$/;"	m
HtmlOther	deps/earmark/lib/earmark/block.ex	/^  defmodule HtmlOther,   do: defstruct attrs: nil, html:   []$/;"	m
HtmlRenderer	deps/earmark/lib/earmark/html_renderer.ex	/^defmodule Earmark.HtmlRenderer do$/;"	m
Ial	deps/earmark/lib/earmark/block.ex	/^  defmodule Ial,         do: defstruct attrs: nil$/;"	m
Ial	deps/earmark/lib/earmark/line.ex	/^  defmodule Ial,          do: defstruct line: "", attrs:   "", inside_code: false$/;"	m
IdDef	deps/earmark/lib/earmark/block.ex	/^  defmodule IdDef,       do: defstruct attrs: nil, id: nil, url: nil, title: nil$/;"	m
IdDef	deps/earmark/lib/earmark/line.ex	/^  defmodule IdDef,        do: defstruct line: "", id: nil, url: nil, title: nil, inside_code: false$/;"	m
Inch	deps/inch_ex/lib/mix/tasks/inch.ex	/^defmodule Mix.Tasks.Inch do$/;"	m
InchEx	deps/inch_ex/lib/inch_ex.ex	/^defmodule InchEx do$/;"	m
Indent	deps/earmark/lib/earmark/line.ex	/^  defmodule Indent,       do: defstruct line: "", level: 0, content: "text", inside_code: false$/;"	m
Inline	deps/earmark/lib/earmark/inline.ex	/^defmodule Earmark.Inline do$/;"	m
Line	deps/earmark/lib/earmark/line.ex	/^defmodule Earmark.Line do$/;"	m
List	deps/earmark/lib/earmark/block.ex	/^  defmodule List,        do: defstruct attrs: nil, type: :ul, blocks:  []$/;"	m
ListItem	deps/earmark/lib/earmark/block.ex	/^  defmodule ListItem,    do: defstruct attrs: nil, type: :ul, spaced: true, blocks: []$/;"	m
ListItem	deps/earmark/lib/earmark/line.ex	/^  defmodule ListItem,     do: defstruct type: :ul, line: "",$/;"	m
Local	deps/inch_ex/lib/inch_ex/reporter/local.ex	/^defmodule InchEx.Reporter.Local do$/;"	m
Markdown	deps/ex_doc/lib/ex_doc/markdown.ex	/^defmodule ExDoc.Markdown do$/;"	m
Mecab	lib/exkanji/mecab.ex	/^defmodule Exkanji.Mecab do$/;"	m
Mixfile	deps/earmark/mix.exs	/^defmodule Earmark.Mixfile do$/;"	m
Mixfile	deps/ex_doc/mix.exs	/^defmodule ExDoc.Mixfile do$/;"	m
Mixfile	deps/exromaji/mix.exs	/^defmodule Exromaji.Mixfile do$/;"	m
Mixfile	deps/inch_ex/mix.exs	/^defmodule InchEx.Mixfile do$/;"	m
Mixfile	deps/poison/mix.exs	/^defmodule Poison.Mixfile do$/;"	m
Mixfile	mix.exs	/^defmodule Exkanji.Mixfile do$/;"	m
ModuleNode	deps/ex_doc/lib/ex_doc/retriever.ex	/^defmodule ExDoc.ModuleNode do$/;"	m
ModuleObject	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^defmodule InchEx.ModuleObject do$/;"	m
Options	deps/earmark/lib/earmark/context.ex	/^defmodule Earmark.Options do$/;"	m
Pandoc	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^defmodule ExDoc.Markdown.Pandoc do$/;"	m
Para	deps/earmark/lib/earmark/block.ex	/^  defmodule Para,        do: defstruct attrs: nil, lines:  []$/;"	m
Parser	deps/earmark/lib/earmark/parser.ex	/^defmodule Earmark.Parser do$/;"	m
Parser	deps/poison/lib/poison/parser.ex	/^defmodule Poison.Parser do$/;"	m
Poison	deps/poison/lib/poison.ex	/^defmodule Poison do$/;"	m
Pretty	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.Pretty do$/;"	m
Readme	deps/earmark/tasks/readme.exs	/^defmodule Mix.Tasks.Readme do$/;"	m
ReadmeBadge	deps/inch_ex/lib/inch_ex/setup/readme_badge.ex	/^defmodule InchEx.Setup.ReadmeBadge do$/;"	m
Remote	deps/inch_ex/lib/inch_ex/reporter/remote.ex	/^defmodule InchEx.Reporter.Remote do$/;"	m
Report	deps/inch_ex/lib/mix/tasks/inch_report.ex	/^defmodule Mix.Tasks.Inch.Report do$/;"	m
Reporter	deps/inch_ex/lib/inch_ex/reporter.ex	/^defmodule InchEx.Reporter do$/;"	m
Retriever	deps/ex_doc/lib/ex_doc/retriever.ex	/^defmodule ExDoc.Retriever do$/;"	m
Retriever	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^defmodule InchEx.Docs.Retriever do$/;"	m
Ruler	deps/earmark/lib/earmark/block.ex	/^  defmodule Ruler,       do: defstruct attrs: nil, type: nil$/;"	m
Ruler	deps/earmark/lib/earmark/line.ex	/^  defmodule Ruler,        do: defstruct line: "", type: "- or * or _", inside_code: false$/;"	m
SetextUnderlineHeading	deps/earmark/lib/earmark/line.ex	/^  defmodule SetextUnderlineHeading,$/;"	m
Setup	deps/inch_ex/lib/inch_ex/setup.ex	/^defmodule InchEx.Setup do$/;"	m
SyntaxError	deps/poison/lib/poison/parser.ex	/^defmodule Poison.SyntaxError do$/;"	m
Table	deps/earmark/lib/earmark/block.ex	/^  defmodule Table do$/;"	m
Table	deps/exromaji/lib/exromaji/tables.ex	/^defmodule Exromaji.Table do$/;"	m
TableLine	deps/earmark/lib/earmark/line.ex	/^  defmodule TableLine,    do: defstruct line: "", content: "", columns: 0, inside_code: false$/;"	m
Templates	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^defmodule ExDoc.Formatter.HTML.Templates do$/;"	m
Text	deps/earmark/lib/earmark/line.ex	/^  defmodule Text,         do: defstruct line: "", content: "", inside_code: false$/;"	m
Translator	deps/exromaji/lib/exromaji/translator.ex	/^defmodule Exromaji.Translator do$/;"	m
Translator	lib/exkanji/translator.ex	/^defmodule Exkanji.Translator do$/;"	m
TravisAfterScript	deps/inch_ex/lib/inch_ex/setup/travis_after_script.ex	/^defmodule InchEx.Setup.TravisAfterScript do$/;"	m
TypeNode	deps/ex_doc/lib/ex_doc/retriever.ex	/^defmodule ExDoc.TypeNode do$/;"	m
TypeObject	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^defmodule InchEx.TypeObject do$/;"	m
__deriving__	deps/poison/lib/poison/encoder.ex	/^  defmacro __deriving__(module, struct, options) do$/;"	a
__using__	deps/poison/lib/poison/encoder.ex	/^  defmacro __using__(_) do$/;"	a
_escape	deps/earmark/lib/earmark/helpers.ex	/^  defp _escape(html) do$/;"	f
_type_of	deps/earmark/lib/earmark/line.ex	/^  defp _type_of(line, options=%Earmark.Options{}, recursive) do$/;"	f
actual_def	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp actual_def(name, arity, :defmacro) do$/;"	f
actual_def	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp actual_def(name, arity, :macrocallback) do$/;"	f
actual_def	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp actual_def(name, arity, _), do: {name, arity}$/;"	f
add_attrs	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_attrs(text, attrs, default) do$/;"	f
add_attrs	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_attrs(text, attrs_as_string, default_attrs \\\\ [])$/;"	f
add_attrs	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_attrs(text, nil, []), do: text$/;"	f
add_attrs	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_attrs(text, nil, default), do: add_attrs(text, "", default)$/;"	f
add_table_rows	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_table_rows(context, rows, tag, aligns \\\\ []) do$/;"	f
add_tds	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_tds(context, row, tag, aligns \\\\ []) do$/;"	f
add_to	deps/earmark/lib/earmark/html_renderer.ex	/^  def add_to(attrs, text) do$/;"	f
add_to_inch_ci	deps/inch_ex/lib/mix/tasks/inchci_add.ex	/^  defp add_to_inch_ci do$/;"	f
add_updated_doc	deps/earmark/tasks/readme.exs	/^  defp add_updated_doc(readme) do$/;"	f
alias_ebin	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp alias_ebin(alias) do$/;"	f
aliases	deps/ex_doc/mix.exs	/^  defp aliases do$/;"	f
all	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def all(modules) do$/;"	f
all	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^  defp all(modules) do$/;"	f
all_docs	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp all_docs(module, modules) do$/;"	f
all_typespecs	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp all_typespecs(module, aliases) do$/;"	f
append_footnote_link	deps/earmark/lib/earmark/html_renderer.ex	/^  def append_footnote_link(block, fnlink) do$/;"	f
append_footnote_link	deps/earmark/lib/earmark/html_renderer.ex	/^  def append_footnote_link(block=%Block.Para{lines: lines}, fnlink) do$/;"	f
append_footnote_link	deps/earmark/lib/earmark/html_renderer.ex	/^  def append_footnote_link(note=%Block.FnDef{}) do$/;"	f
append_slash	deps/ex_doc/lib/ex_doc.ex	/^  defp append_slash(url) do$/;"	f
append_slash	deps/inch_ex/lib/inch_ex.ex	/^  defp append_slash(url) do$/;"	f
application	deps/earmark/mix.exs	/^  def application do$/;"	f
application	deps/ex_doc/mix.exs	/^  def application do$/;"	f
application	deps/exromaji/mix.exs	/^  def application do$/;"	f
application	deps/inch_ex/mix.exs	/^  def application do$/;"	f
application	deps/poison/mix.exs	/^  def application do$/;"	f
application	mix.exs	/^  def application do$/;"	f
array_values	deps/poison/lib/poison/parser.ex	/^  defp array_values("]" <> rest, _, []) do$/;"	f
array_values	deps/poison/lib/poison/parser.ex	/^  defp array_values(string, keys, acc) do$/;"	f
asset_rev	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp asset_rev(output, pattern) do$/;"	f
assets	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp assets do$/;"	f
assign_attributes_to_blocks	deps/earmark/lib/earmark/block.ex	/^  def assign_attributes_to_blocks([ %Ial{attrs: attrs}, block | rest], result) do$/;"	f
assign_attributes_to_blocks	deps/earmark/lib/earmark/block.ex	/^  def assign_attributes_to_blocks([ block | rest], result) do$/;"	f
assign_attributes_to_blocks	deps/earmark/lib/earmark/block.ex	/^  def assign_attributes_to_blocks([], result), do: Enum.reverse(result)$/;"	f
attrs_to_string	deps/earmark/lib/earmark/html_renderer.ex	/^  def attrs_to_string(attrs) do$/;"	f
available?	deps/ex_doc/lib/ex_doc/markdown/cmark.ex	/^  def available? do$/;"	f
available?	deps/ex_doc/lib/ex_doc/markdown/earmark.ex	/^  def available? do$/;"	f
available?	deps/ex_doc/lib/ex_doc/markdown/hoedown.ex	/^  def available? do$/;"	f
available?	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  def available? do$/;"	f
basic_rules	deps/earmark/lib/earmark/inline.ex	/^  defp basic_rules do$/;"	f
behaviours_implemented_by	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp behaviours_implemented_by(module) do$/;"	f
behaviours_implemented_by	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp behaviours_implemented_by(module) do$/;"	f
behead	deps/earmark/lib/earmark/helpers.ex	/^  def behead(str, ignore) when is_integer(ignore) do$/;"	f
behead	deps/earmark/lib/earmark/helpers.ex	/^  def behead(str, leading_string) do$/;"	f
behead	deps/earmark/lib/earmark/helpers.ex	/^  def behead(str, {start, length}), do: behead(str, start + length)$/;"	f
behead_unopening_text	deps/earmark/lib/earmark/helpers.ex	/^  defp behead_unopening_text( line ) do $/;"	f
blank_line_in?	deps/earmark/lib/earmark/block.ex	/^  defp blank_line_in?([ %Line.Blank{} | _ ]), do: true$/;"	f
blank_line_in?	deps/earmark/lib/earmark/block.ex	/^  defp blank_line_in?([ _ | rest ]),          do: blank_line_in?(rest)$/;"	f
blank_line_in?	deps/earmark/lib/earmark/block.ex	/^  defp blank_line_in?([]),                    do: false$/;"	f
br	deps/earmark/lib/earmark/html_renderer.ex	/^  def br,                  do: "<br\/>"$/;"	f
branch_name	deps/inch_ex/lib/inch_ex/git.ex	/^  def branch_name do$/;"	f
build_config	deps/ex_doc/lib/ex_doc.ex	/^  defp build_config(project, version, options) do$/;"	f
build_config	deps/inch_ex/lib/inch_ex.ex	/^  defp build_config(project, version, options) do$/;"	f
callbacks_defined_by	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp callbacks_defined_by(module) do$/;"	f
callbacks_implemented_by	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp callbacks_implemented_by(module) do$/;"	f
callbacks_of	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp callbacks_of(module) do$/;"	f
check_formatter_module	deps/ex_doc/lib/ex_doc.ex	/^  defp check_formatter_module(modname, argname) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size("", _, acc), do: acc$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<_ :: utf8>> <> _, :unicode, acc) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char :: utf8>> <> _, :javascript, acc) when char in [0x2028, 0x2029] do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>> <> _, _mode, acc) when char <= 0x1F or char in '"\\\\' do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>> <> rest, mode, acc) when char < 0x80 do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>>, _, _) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<codepoint :: utf8>> <> rest, mode, acc) do$/;"	f
circleci?	deps/inch_ex/lib/inch_ex/env.ex	/^  def circleci? do$/;"	f
clean_test_fixtures	deps/ex_doc/mix.exs	/^  defp clean_test_fixtures(_args) do$/;"	f
codespan	deps/earmark/lib/earmark/html_renderer.ex	/^  def codespan(text),      do: ~s[<code class="inline">#{text}<\/code>]$/;"	f
collect_output	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  defp collect_output(port, data) do$/;"	f
consolidate_list_items	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_list_items($/;"	f
consolidate_list_items	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_list_items([ head | rest ], result) do$/;"	f
consolidate_list_items	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_list_items([ item = %ListItem{type: type} | rest], result) do$/;"	f
consolidate_list_items	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_list_items([], result), do: result  # no need to reverse$/;"	f
consolidate_para	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_para( [], result, false ), do: {result, []}$/;"	f
consolidate_para	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_para( [], result, pending ) do$/;"	f
consolidate_para	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_para( [line | rest] = lines, result, pending ) do$/;"	f
consolidate_para	deps/earmark/lib/earmark/block.ex	/^  defp consolidate_para( lines ), do: consolidate_para( lines, [], false )$/;"	f
convert	deps/earmark/lib/earmark/inline.ex	/^  def convert(src, context) do$/;"	f
convert	deps/earmark/lib/earmark/inline.ex	/^  def convert(src, context) when is_list(src) do$/;"	f
convert_autolink	deps/earmark/lib/earmark/inline.ex	/^  defp convert_autolink(link, _separator = "@") do$/;"	f
convert_autolink	deps/earmark/lib/earmark/inline.ex	/^  defp convert_autolink(link, _separator) do$/;"	f
convert_each	deps/earmark/lib/earmark/inline.ex	/^  defp convert_each("", _context, result) do$/;"	f
convert_each	deps/earmark/lib/earmark/inline.ex	/^  defp convert_each(src, context, result) do$/;"	f
create_extra_files	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp create_extra_files(module_nodes, modules, exceptions, protocols, config, options) do$/;"	f
create_footnote_blocks	deps/earmark/lib/earmark/parser.ex	/^  defp create_footnote_blocks(blocks, []), do: blocks$/;"	f
create_footnote_blocks	deps/earmark/lib/earmark/parser.ex	/^  defp create_footnote_blocks(blocks, footnotes) do$/;"	f
create_sidebar_items	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def create_sidebar_items(input) do$/;"	f
decode	deps/poison/lib/poison.ex	/^  def decode(iodata, options \\\\ []) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, _options) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, options) when is_map(value) or is_list(value) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, options)$/;"	f
decode!	deps/poison/lib/poison.ex	/^  def decode!(iodata, options \\\\ []) do$/;"	f
deps	deps/earmark/mix.exs	/^  defp deps do$/;"	f
deps	deps/ex_doc/mix.exs	/^  defp deps do$/;"	f
deps	deps/exromaji/mix.exs	/^  defp deps do$/;"	f
deps	deps/inch_ex/lib/inch_ex/setup/travis_after_script.ex	/^        defp deps do$/;"	f
deps	deps/inch_ex/mix.exs	/^  defp deps do$/;"	f
deps	deps/poison/mix.exs	/^  defp deps do$/;"	f
deps	mix.exs	/^  defp deps do$/;"	f
deriving	deps/poison/lib/poison/encoder.ex	/^  def deriving(module, _struct, options) do$/;"	f
description	deps/earmark/mix.exs	/^  defp description do$/;"	f
detect_katakana	deps/exromaji/lib/exromaji/translator.ex	/^  defp detect_katakana([], kana), do: kana$/;"	f
detect_katakana	deps/exromaji/lib/exromaji/translator.ex	/^  defp detect_katakana([head|tail], kana) do$/;"	f
detect_katakana	deps/exromaji/lib/exromaji/translator.ex	/^  defp detect_katakana(list, kana \\\\ "")$/;"	f
detect_romaji	deps/exromaji/lib/exromaji/translator.ex	/^  defp detect_romaji([], kana), do: kana$/;"	f
detect_romaji	deps/exromaji/lib/exromaji/translator.ex	/^  defp detect_romaji([head|tail], kana) do$/;"	f
detect_romaji	deps/exromaji/lib/exromaji/translator.ex	/^  defp detect_romaji(list, kana \\\\ "")$/;"	f
detect_type	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp detect_type(module) do$/;"	f
detect_type	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp detect_type(module) do$/;"	f
dirty?	deps/inch_ex/lib/inch_ex/git.ex	/^  def dirty? do$/;"	f
do_generate	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp do_generate(args, opts, generator) do$/;"	f
do_transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp do_transform_struct(value, keys, as, options) do$/;"	f
do_version	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp do_version do$/;"	f
doc?	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp doc?(_, _) do$/;"	f
doc?	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp doc?({_, _, _, _, false}, _) do$/;"	f
doc?	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp doc?({{name, _}, _, _, _, nil}, :protocol) when name in [:impl_for, :impl_for!] do$/;"	f
doc?	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp doc?({{name, _}, _, _, _, nil}, _type) do$/;"	f
doc_for	deps/earmark/tasks/readme.exs	/^  defp doc_for("", name) do$/;"	f
doc_for	deps/earmark/tasks/readme.exs	/^  defp doc_for("module", name) do$/;"	f
doc_prefix	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp doc_prefix(%{type: _}), do: ""$/;"	f
doc_prefix	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp doc_prefix(%{type: c}) when c in [:callback, :macrocallback], do: "c:"$/;"	f
docs_from_dir	deps/ex_doc/lib/ex_doc/retriever.ex	/^  def docs_from_dir(dir, config) when is_binary(dir) do$/;"	f
docs_from_dir	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  def docs_from_dir(dir, config) do$/;"	f
docs_from_files	deps/ex_doc/lib/ex_doc/retriever.ex	/^  def docs_from_files(files, config) when is_list(files) do$/;"	f
docs_from_files	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  def docs_from_files(files, config) when is_list(files) do$/;"	f
docs_from_modules	deps/ex_doc/lib/ex_doc/retriever.ex	/^  def docs_from_modules(modules, config) when is_list(modules) do$/;"	f
docs_from_modules	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  def docs_from_modules(modules, config) when is_list(modules) do$/;"	f
elixir_ebin	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp elixir_ebin do$/;"	f
elixirc_paths	deps/earmark/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f
elixirc_paths	deps/earmark/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
elixirc_paths	deps/ex_doc/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/fixtures"]$/;"	f
elixirc_paths	deps/ex_doc/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
em	deps/earmark/lib/earmark/html_renderer.ex	/^  def em(text),            do: "<em>#{text}<\/em>"$/;"	f
enc_h	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def enc_h(binary) do$/;"	f
encode	deps/earmark/lib/earmark/helpers.ex	/^  def encode(html) do$/;"	f
encode	deps/poison/lib/poison.ex	/^  def encode(value, options \\\\ []) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^        def encode(struct, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode("", _), do: "\\"\\""$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(%{__struct__: _} = struct, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode([], _), do: "[]"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(atom, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(dict, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(dict, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(dict, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(false, _), do: "false"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(float, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(integer, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, _) when map_size(map) < 1, do: "{}"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, _, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(nil, _),   do: "null"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(string, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(true, _),  do: "true"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(value, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(value, options)$/;"	f
encode!	deps/poison/lib/poison.ex	/^  def encode!(value, options \\\\ []) do$/;"	f
encode_name	deps/poison/lib/poison/encoder.ex	/^      defp encode_name(value) do$/;"	f
encode_to_iodata	deps/poison/lib/poison.ex	/^  def encode_to_iodata(value, options \\\\ []) do$/;"	f
encode_to_iodata!	deps/poison/lib/poison.ex	/^  def encode_to_iodata!(value, options \\\\ []) do$/;"	f
erlang_functions	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def erlang_functions(bin) when is_binary(bin) do$/;"	f
erlang_lib_dir	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp erlang_lib_dir do$/;"	f
escape	deps/earmark/lib/earmark/helpers.ex	/^  def escape(html, _), do: _escape(String.replace(html, "&", "&amp;"))$/;"	f
escape	deps/earmark/lib/earmark/helpers.ex	/^  def escape(html, encode \\\\ false)$/;"	f
escape	deps/earmark/lib/earmark/helpers.ex	/^  def escape(html, false), do: _escape(Regex.replace(~r{&(?!#?\\w+;)}, html, "&amp;"))$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^    defp escape(<<unquote(char)>> <> rest, mode) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape("", _), do: []$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :javascript) when char in [0x2028, 0x2029] do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :unicode) when char > 0xFFFF do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :unicode) when char in 0xA0..0xFFFF do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, mode) when char in 0x80..0x9F do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char>> <> rest, mode) when char <= 0x1F or char == 0x7F do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(string, mode) do$/;"	f
escript_config	deps/earmark/mix.exs	/^  defp escript_config do$/;"	f
exception	deps/earmark/lib/earmark/html_renderer.ex	/^    def exception(msg), do: %__MODULE__{message: msg}$/;"	f
exception	deps/poison/lib/poison/parser.ex	/^  def exception(opts) do$/;"	f
expand	deps/earmark/lib/earmark/html_renderer.ex	/^  def expand(dict, attrs) do$/;"	f
expand_alias	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp expand_alias(_), do: nil$/;"	f
expand_alias	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp expand_alias(atom) when is_atom(atom), do: atom$/;"	f
expand_alias	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp expand_alias({:__aliases__, _, [h|t]}) when is_atom(h), do: Module.concat([h|t])$/;"	f
expand_tabs	deps/earmark/lib/earmark/helpers.ex	/^  def expand_tabs(line) do$/;"	f
expander	deps/earmark/lib/earmark/helpers.ex	/^  defp expander(_, leader) do$/;"	f
extra_files_options	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp extra_files_options(opts) do$/;"	f
extract_headers	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp extract_headers(content) do$/;"	f
extract_title	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp extract_title(content) do$/;"	f
extract_url	deps/inch_ex/lib/inch_ex/setup/readme_badge.ex	/^  defp extract_url(text) do$/;"	f
filename_to_module	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp filename_to_module(name) do$/;"	f
filename_to_module	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp filename_to_module(name) do$/;"	f
filter_list	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp filter_list(:exceptions, nodes) do$/;"	f
filter_list	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp filter_list(:modules, nodes) do$/;"	f
filter_list	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp filter_list(:protocols, nodes) do$/;"	f
find_actual_line	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp find_actual_line(abst_code, function, :callback) do$/;"	f
find_actual_line	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp find_actual_line(abst_code, name, :module) do$/;"	f
find_actual_line	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp find_actual_line(abst_code, {name, arity}, :function) do$/;"	f
find_footnote_links	deps/earmark/lib/earmark/parser.ex	/^  defp find_footnote_links(%Block.Para{lines: lines}), do: Enum.map(lines, &find_footnote_links\/1)$/;"	f
find_footnote_links	deps/earmark/lib/earmark/parser.ex	/^  defp find_footnote_links(_), do: []$/;"	f
find_footnote_links	deps/earmark/lib/earmark/parser.ex	/^  defp find_footnote_links(line) when is_bitstring(line) do$/;"	f
find_formatter	deps/ex_doc/lib/ex_doc.ex	/^  defp find_formatter("ExDoc.Formatter." <> _ = name) do$/;"	f
find_formatter	deps/ex_doc/lib/ex_doc.ex	/^  defp find_formatter(modname) when is_atom(modname), do: modname$/;"	f
find_formatter	deps/ex_doc/lib/ex_doc.ex	/^  defp find_formatter(name) do$/;"	f
find_markdown_processor	deps/ex_doc/lib/ex_doc/markdown.ex	/^  defp find_markdown_processor() do$/;"	f
footnote_link	deps/earmark/lib/earmark/html_renderer.ex	/^  def footnote_link(ref, backref, number), do: ~s[<a href="##{ref}" id="#{backref}" class="footnote" title="see footnote">#{number}<\/a>]$/;"	f
footnote_link	deps/earmark/lib/earmark/inline.ex	/^  defp footnote_link(context, match, id) do$/;"	f
formatter_options	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp formatter_options(opts) do$/;"	f
from_elixir	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp from_elixir(alias) do$/;"	f
fun	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^  defp fun(module, func) do$/;"	f
generate_api_reference	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_api_reference(modules, exceptions, protocols, output, config) do$/;"	f
generate_assets	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  def generate_assets(source, output) do$/;"	f
generate_docs	deps/ex_doc/lib/ex_doc.ex	/^  def generate_docs(project, version, options) when is_binary(project) and is_binary(version) and is_list(options) do$/;"	f
generate_docs	deps/inch_ex/lib/inch_ex.ex	/^  def generate_docs(project, version, args, options) when is_binary(project) and is_binary(version) and is_list(options) do$/;"	f
generate_extra	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_extra(input, output, module_nodes, modules, exceptions, protocols, config) do$/;"	f
generate_extra	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_extra({input_file, options}, output, module_nodes, modules, exceptions, protocols, config) do$/;"	f
generate_extras	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_extras(output, module_nodes, modules, exceptions, protocols, config) do$/;"	f
generate_index	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_index(output, config) do$/;"	f
generate_list	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_list(nodes, modules, exceptions, protocols, output, config) do$/;"	f
generate_module_page	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_module_page(node, modules, exceptions, protocols, output, config) do$/;"	f
generate_node	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp generate_node(module, type, config) do$/;"	f
generate_node	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp generate_node(nil, _, _), do: nil$/;"	f
generate_node	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp generate_node(module, type, config) do$/;"	f
generate_node	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp generate_node(nil, _, _), do: nil$/;"	f
generate_not_found	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_not_found(modules, exceptions, protocols, output, config) do$/;"	f
generate_redirect	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_redirect(output, file_name, config, redirect_to) do$/;"	f
generate_sidebar_items	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp generate_sidebar_items(modules, exceptions, protocols, extras, output) do$/;"	f
get_abstract_code	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_abstract_code(module) do$/;"	f
get_badge_url	deps/inch_ex/lib/inch_ex/setup/readme_badge.ex	/^  defp get_badge_url(project_url) do$/;"	f
get_call_signature	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_call_signature(name, args) do$/;"	f
get_callback	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_callback(callback, source_path, source_url, callbacks, abst_code) do$/;"	f
get_callback	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp get_callback(callback, source_path, source_url, _callbacks) do$/;"	f
get_callbacks	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_callbacks(:behaviour, module, source_path, source_url, abst_code) do$/;"	f
get_callbacks	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_callbacks(_, _, _, _, _), do: []$/;"	f
get_docs	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_docs(type, module, source_path, source_url, specs, impls, abst_code) do$/;"	f
get_docs_opts	deps/ex_doc/lib/mix/tasks/docs.ex	/^  defp get_docs_opts(config) do$/;"	f
get_docs_opts	deps/inch_ex/lib/mix/tasks/inch.ex	/^  defp get_docs_opts(config) do$/;"	f
get_footnote_numbers	deps/earmark/lib/earmark/parser.ex	/^  def get_footnote_numbers(refs, footnotes, options) do$/;"	f
get_function	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_function(function, source_path, source_url, all_specs, cb_impls, abst_code) do$/;"	f
get_function	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp get_function(function, source_path, source_url, _all_specs, cb_impls) do$/;"	f
get_impls	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_impls(module) do$/;"	f
get_markdown_processor	deps/ex_doc/lib/ex_doc/markdown.ex	/^  defp get_markdown_processor() do$/;"	f
get_module	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_module(module, config) do$/;"	f
get_module	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp get_module(module, config) do$/;"	f
get_moduledoc	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_moduledoc(module) do$/;"	f
get_source	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp get_source(alias, aliases) do$/;"	f
get_specs	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp get_specs(%ExDoc.FunctionNode{specs: specs}) when is_list(specs) do$/;"	f
get_specs	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp get_specs(_node), do: nil$/;"	f
get_specs	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_specs(module) do$/;"	f
get_string	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  defp get_string(opts, key, default) do$/;"	f
get_types	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_types(module) do$/;"	f
get_typespec_signature	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_typespec_signature({:::, _, [{name, meta, args}, _]}, arity) do$/;"	f
get_typespec_signature	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_typespec_signature({:when, _, [{:::, _, [{name, meta, args}, _]}, _]}, arity) do$/;"	f
get_typespec_signature	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp get_typespec_signature({name, meta, args}, arity) do$/;"	f
git_output	deps/inch_ex/lib/inch_ex/git.ex	/^  defp git_output(args) do$/;"	f
github_repo_info	deps/inch_ex/lib/inch_ex/git_hub.ex	/^  defp github_repo_info(nwo) do$/;"	f
group_types	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp group_types(node) do$/;"	f
guess_url	deps/ex_doc/lib/ex_doc.ex	/^  defp guess_url(other, _) do$/;"	f
guess_url	deps/ex_doc/lib/ex_doc.ex	/^  defp guess_url(url = <<"https:\/\/bitbucket.org\/", _ :: binary>>, ref) do$/;"	f
guess_url	deps/ex_doc/lib/ex_doc.ex	/^  defp guess_url(url = <<"https:\/\/github.com\/", _ :: binary>>, ref) do$/;"	f
guess_url	deps/inch_ex/lib/inch_ex.ex	/^  defp guess_url(other, _) do$/;"	f
guess_url	deps/inch_ex/lib/inch_ex.ex	/^  defp guess_url(url = <<"https:\/\/bitbucket.org\/", _ :: binary>>, ref) do$/;"	f
guess_url	deps/inch_ex/lib/inch_ex.ex	/^  defp guess_url(url = <<"https:\/\/github.com\/", _ :: binary>>, ref) do$/;"	f
h	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def h(binary) do$/;"	f
handle_error	deps/inch_ex/lib/inch_ex/reporter.ex	/^  def handle_error(output) do$/;"	f
handle_footnotes	deps/earmark/lib/earmark/parser.ex	/^  def handle_footnotes(blocks, options, map_func) do$/;"	f
handle_success	deps/inch_ex/lib/inch_ex/reporter.ex	/^  def handle_success(output) do$/;"	f
has_doc?	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp has_doc?(_, _) do$/;"	f
has_doc?	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp has_doc?({{name, _}, _, _, _, nil}, :protocol) when name in [:impl_for, :impl_for!] do$/;"	f
has_doc?	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp has_doc?({{name, _}, _, _, _, nil}, _type) do$/;"	f
has_opening_backquotes	deps/earmark/lib/earmark/helpers.ex	/^  defp has_opening_backquotes line do$/;"	f
header_to_id	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp header_to_id(header) do$/;"	f
hira	deps/exromaji/lib/exromaji.ex	/^  defdelegate hira(text), to: Exromaji.Translator, as: :hiragana$/;"	d
hira2kata	deps/exromaji/lib/exromaji.ex	/^  defdelegate hira2kata(text), to: Exromaji.Translator, as: :hira2kata$/;"	d
hira2kata	deps/exromaji/lib/exromaji/translator.ex	/^  def hira2kata(_), do: nil$/;"	f
hira2kata	deps/exromaji/lib/exromaji/translator.ex	/^  def hira2kata(text) when is_atom(text), do: hira2kata(to_char_list(text))$/;"	f
hira2kata	deps/exromaji/lib/exromaji/translator.ex	/^  def hira2kata(text) when is_binary(text), do: hira2kata(to_char_list(text))$/;"	f
hira2kata	deps/exromaji/lib/exromaji/translator.ex	/^  def hira2kata(text) when is_list(text) do$/;"	f
hiragana	deps/exromaji/lib/exromaji.ex	/^  defdelegate hiragana(text), to: Exromaji.Translator, as: :hiragana$/;"	d
hiragana	deps/exromaji/lib/exromaji/translator.ex	/^  def hiragana(text) do$/;"	f
hiragana	lib/exkanji/translator.ex	/^  def hiragana(text) do$/;"	f
html_match_to_closing	deps/earmark/lib/earmark/block.ex	/^  defp html_match_to_closing(tag, [ line | rest ], result) do$/;"	f
html_match_to_closing	deps/earmark/lib/earmark/block.ex	/^  defp html_match_to_closing(tag, [], result) do$/;"	f
html_match_to_closing	deps/earmark/lib/earmark/block.ex	/^  defp html_match_to_closing(tag,$/;"	f
image	deps/earmark/lib/earmark/html_renderer.ex	/^  def image(path, alt, nil) do$/;"	f
image	deps/earmark/lib/earmark/html_renderer.ex	/^  def image(path, alt, title) do$/;"	f
inch_build_api_endpoint	deps/inch_ex/lib/inch_ex/reporter/remote.ex	/^  defp inch_build_api_endpoint do$/;"	f
inch_cli_api_endpoint	deps/inch_ex/lib/inch_ex/reporter/local.ex	/^  defp inch_cli_api_endpoint do$/;"	f
inch_cmd	deps/inch_ex/lib/inch_ex/reporter/local.ex	/^  defp inch_cmd do$/;"	f
indent	deps/poison/lib/poison/encoder.ex	/^      defp indent(options) do$/;"	f
input_to_title	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp input_to_title(input) do$/;"	f
io_device	deps/earmark/lib/earmark/cli.ex	/^  defp io_device({:error, reason}, filename) do$/;"	f
io_device	deps/earmark/lib/earmark/cli.ex	/^  defp io_device({:ok, io_device}, _), do: io_device$/;"	f
is_blank	deps/earmark/lib/earmark/block.ex	/^  defp is_blank(%Line.Blank{}),   do: true$/;"	f
is_blank	deps/earmark/lib/earmark/block.ex	/^  defp is_blank(_),               do: false$/;"	f
is_blockquote_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_blockquote_or_text(%Line.BlockQuote{}), do: true$/;"	f
is_blockquote_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_blockquote_or_text(struct),             do: is_text(struct)$/;"	f
is_footnote_def	deps/earmark/lib/earmark/parser.ex	/^  defp is_footnote_def(%Block.FnDef{}), do: true$/;"	f
is_footnote_def	deps/earmark/lib/earmark/parser.ex	/^  defp is_footnote_def(_block), do: false$/;"	f
is_indent_or_blank	deps/earmark/lib/earmark/block.ex	/^  defp is_indent_or_blank(%Line.Indent{}), do: true$/;"	f
is_indent_or_blank	deps/earmark/lib/earmark/block.ex	/^  defp is_indent_or_blank(line),           do: is_blank(line)$/;"	f
is_inline_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_inline_or_text( _line, false), do: %{pending: false, continue: false}$/;"	f
is_inline_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_inline_or_text( line, pending ) do$/;"	f
is_inline_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_inline_or_text(line = %Line.TableLine{}, false) do$/;"	f
is_inline_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_inline_or_text(line = %Line.Text{}, false) do$/;"	f
is_inline_or_text	deps/earmark/lib/earmark/block.ex	/^  defp is_inline_or_text(line, pending)$/;"	f
is_text	deps/earmark/lib/earmark/block.ex	/^  defp is_text(%Line.TableLine{}), do: true$/;"	f
is_text	deps/earmark/lib/earmark/block.ex	/^  defp is_text(%Line.Text{}),      do: true$/;"	f
is_text	deps/earmark/lib/earmark/block.ex	/^  defp is_text(_),                 do: false$/;"	f
kana2romaji	deps/exromaji/lib/exromaji/tables.ex	/^  def kana2romaji, do: %{$/;"	f
kata	deps/exromaji/lib/exromaji.ex	/^  defdelegate kata(text), to: Exromaji.Translator, as: :katakana$/;"	d
kata2hira	deps/exromaji/lib/exromaji.ex	/^  defdelegate kata2hira(text), to: Exromaji.Translator, as: :kata2hira$/;"	d
kata2hira	deps/exromaji/lib/exromaji/translator.ex	/^  def kata2hira(_), do: nil$/;"	f
kata2hira	deps/exromaji/lib/exromaji/translator.ex	/^  def kata2hira(text) when is_atom(text), do: kata2hira(to_char_list(text))$/;"	f
kata2hira	deps/exromaji/lib/exromaji/translator.ex	/^  def kata2hira(text) when is_binary(text), do: kata2hira(to_char_list(text))$/;"	f
kata2hira	deps/exromaji/lib/exromaji/translator.ex	/^  def kata2hira(text) when is_list(text) do$/;"	f
katakana	deps/exromaji/lib/exromaji.ex	/^  defdelegate katakana(text), to: Exromaji.Translator, as: :katakana$/;"	d
katakana	deps/exromaji/lib/exromaji/translator.ex	/^  def katakana(text) do$/;"	f
katakana	lib/exkanji/translator.ex	/^  def katakana(text) do$/;"	f
lines_to_blocks	deps/earmark/lib/earmark/block.ex	/^  def lines_to_blocks(lines) do$/;"	f
link	deps/earmark/lib/earmark/html_renderer.ex	/^  def link(url, text),        do: ~s[<a href="#{url}">#{text}<\/a>]$/;"	f
link	deps/earmark/lib/earmark/html_renderer.ex	/^  def link(url, text, nil),   do: ~s[<a href="#{url}">#{text}<\/a>]$/;"	f
link	deps/earmark/lib/earmark/html_renderer.ex	/^  def link(url, text, title), do: ~s[<a href="#{url}" title="#{title}">#{text}<\/a>]$/;"	f
link_extractor	deps/earmark/lib/earmark/block.ex	/^  defp link_extractor(_, result), do: result$/;"	f
link_extractor	deps/earmark/lib/earmark/block.ex	/^  defp link_extractor(item = %IdDef{id: id}, result) do$/;"	f
link_headers	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp link_headers(content) do$/;"	f
link_id	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp link_id(id, type) do$/;"	f
link_id	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp link_id(node), do: link_id(node.id, node.type)$/;"	f
links_from_blocks	deps/earmark/lib/earmark/block.ex	/^  defp links_from_blocks(blocks) do$/;"	f
local_doc	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def local_doc(bin, locals) when is_binary(bin) do$/;"	f
local_inch	deps/inch_ex/lib/inch_ex/reporter/local.ex	/^  defp local_inch(args) do$/;"	f
local_inch?	deps/inch_ex/lib/inch_ex/reporter/local.ex	/^  defp local_inch? do$/;"	f
log	deps/ex_doc/lib/mix/tasks/docs.ex	/^  defp log(index) do$/;"	f
logo_path	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp logo_path(%{logo: logo}), do: "assets\/logo#{Path.extname(logo)}"$/;"	f
logo_path	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp logo_path(%{logo: nil}), do: nil$/;"	f
look_for_alignments	deps/earmark/lib/earmark/block.ex	/^  defp look_for_alignments([ _first, second | _rest ]) do$/;"	f
main	deps/earmark/lib/earmark/cli.ex	/^  def main(argv) do$/;"	f
mangle_link	deps/earmark/lib/earmark/inline.ex	/^  def mangle_link(link) do$/;"	f
map_tuple_to_list	deps/inch_ex/lib/inch_ex.ex	/^    def map_tuple_to_list([head | tail]) do$/;"	f
map_tuple_to_list	deps/inch_ex/lib/inch_ex.ex	/^    def map_tuple_to_list([head | tail]) when is_list(head) do$/;"	f
map_tuple_to_list	deps/inch_ex/lib/inch_ex.ex	/^    def map_tuple_to_list([head | tail]) when is_tuple(head) do$/;"	f
map_tuple_to_list	deps/inch_ex/lib/inch_ex.ex	/^    def map_tuple_to_list(tuple) when is_tuple(tuple) do$/;"	f
map_tuple_to_list	deps/inch_ex/lib/inch_ex.ex	/^    def map_tuple_to_list(value) do$/;"	f
matches_id_title	deps/earmark/lib/earmark/line.ex	/^  def matches_id_title(content) do$/;"	f
merge_config	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp merge_config(opts) do$/;"	f
message	deps/poison/lib/poison/encoder.ex	/^  def message(%{message: message}) do$/;"	f
message	deps/poison/lib/poison/encoder.ex	/^  def message(%{value: value, message: nil}) do$/;"	f
mod	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^  defp mod(module) do$/;"	f
module_exports_function?	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp module_exports_function?(function_str) do$/;"	f
module_page	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def module_page(node, modules, exceptions, protocols, config) do$/;"	f
module_to_string	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp module_to_string(module) do$/;"	f
new_for_columns	deps/earmark/lib/earmark/block.ex	/^    def new_for_columns(n) do$/;"	f
noop	deps/earmark/lib/earmark/inline.ex	/^  defp noop(text), do: text$/;"	f
normalize	deps/exromaji/lib/exromaji/translator.ex	/^  def normalize(_), do: nil$/;"	f
normalize	deps/exromaji/lib/exromaji/translator.ex	/^  def normalize(text) when is_atom(text), do: normalize(to_char_list(text))$/;"	f
normalize	deps/exromaji/lib/exromaji/translator.ex	/^  def normalize(text) when is_binary(text), do: normalize(to_char_list(text))$/;"	f
normalize	deps/exromaji/lib/exromaji/translator.ex	/^  def normalize(text) when is_list(text) do$/;"	f
normalize_config	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp normalize_config(%{main: "index"}) do$/;"	f
normalize_config	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp normalize_config(%{main: main} = config) do$/;"	f
normalize_options	deps/ex_doc/lib/ex_doc.ex	/^  defp normalize_options(options) do$/;"	f
normalize_options	deps/inch_ex/lib/inch_ex.ex	/^  defp normalize_options(options) do$/;"	f
number_complete	deps/poison/lib/poison/parser.ex	/^  defp number_complete(iolist, false) do$/;"	f
number_complete	deps/poison/lib/poison/parser.ex	/^  defp number_complete(iolist, true) do$/;"	f
number_digits	deps/poison/lib/poison/parser.ex	/^  defp number_digits(<<char>> <> rest = string) when char in '0123456789' do$/;"	f
number_digits	deps/poison/lib/poison/parser.ex	/^  defp number_digits(other), do: syntax_error(other)$/;"	f
number_digits_count	deps/poison/lib/poison/parser.ex	/^  defp number_digits_count(<<char>> <> rest, acc) when char in '0123456789' do$/;"	f
number_digits_count	deps/poison/lib/poison/parser.ex	/^  defp number_digits_count(_, acc), do: acc$/;"	f
number_exp	deps/poison/lib/poison/parser.ex	/^  defp number_exp(<<e>> <> rest, frac, acc) when e in 'eE' do$/;"	f
number_exp	deps/poison/lib/poison/parser.ex	/^  defp number_exp(string, frac, acc) do$/;"	f
number_exp_continue	deps/poison/lib/poison/parser.ex	/^  defp number_exp_continue(rest, acc) do$/;"	f
number_frac	deps/poison/lib/poison/parser.ex	/^  defp number_frac("." <> rest, acc) do$/;"	f
number_frac	deps/poison/lib/poison/parser.ex	/^  defp number_frac(string, acc) do$/;"	f
number_int	deps/poison/lib/poison/parser.ex	/^  defp number_int(<<char, _ :: binary>> = string, acc) when char in '123456789' do$/;"	f
number_int	deps/poison/lib/poison/parser.ex	/^  defp number_int(other, _), do: syntax_error(other)$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start("-" <> rest) do$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start("0" <> rest) do$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start(string) do$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, :atoms!), do: String.to_existing_atom(name)$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, :atoms),  do: String.to_atom(name)$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, _keys),   do: name$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs("\\"" <> rest, keys, acc) do$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs("}" <> rest, _, []) do$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs(other, _, _), do: syntax_error(other)$/;"	f
object_type	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^  defp object_type(str) do$/;"	f
offset	deps/poison/lib/poison/encoder.ex	/^      defp offset(options) do$/;"	f
offset	deps/poison/lib/poison/encoder.ex	/^      defp offset(options, value) do$/;"	f
on_lib_path?	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp on_lib_path?(:non_existing, _base_path), do: false$/;"	f
on_lib_path?	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp on_lib_path?(beam_path, base_path) do$/;"	f
open_file	deps/earmark/lib/earmark/cli.ex	/^  defp open_file(filename), do: io_device(File.open(filename, [:utf8]), filename)$/;"	f
open_port	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  defp open_port(path, opts) do$/;"	f
open_source?	deps/inch_ex/lib/inch_ex/git_hub.ex	/^  def open_source?("https:\/\/github.com\/" <> slug) do$/;"	f
open_source?	deps/inch_ex/lib/inch_ex/git_hub.ex	/^  def open_source?(_) do$/;"	f
origin_url	deps/inch_ex/lib/inch_ex/git.ex	/^  def origin_url do$/;"	f
output_footnote_link	deps/earmark/lib/earmark/inline.ex	/^  defp output_footnote_link(context, ref, back_ref, number) do$/;"	f
output_image	deps/earmark/lib/earmark/inline.ex	/^  defp output_image(renderer, text, href, title) do$/;"	f
output_image_or_link	deps/earmark/lib/earmark/inline.ex	/^  defp output_image_or_link(context, "!" <> _, text, href, title) do$/;"	f
output_image_or_link	deps/earmark/lib/earmark/inline.ex	/^  defp output_image_or_link(context, _, text, href, title) do$/;"	f
output_link	deps/earmark/lib/earmark/inline.ex	/^  defp output_link(context, text, href, title) do$/;"	f
package	deps/earmark/mix.exs	/^  defp package do$/;"	f
package	deps/ex_doc/mix.exs	/^  defp package do$/;"	f
package	deps/exromaji/mix.exs	/^  defp package do$/;"	f
package	deps/poison/mix.exs	/^  defp package do$/;"	f
package	mix.exs	/^  defp package do$/;"	f
pad	deps/earmark/lib/earmark/helpers.ex	/^  defp pad(1), do: " "$/;"	f
pad	deps/earmark/lib/earmark/helpers.ex	/^  defp pad(2), do: "  "$/;"	f
pad	deps/earmark/lib/earmark/helpers.ex	/^  defp pad(3), do: "   "$/;"	f
pad	deps/earmark/lib/earmark/helpers.ex	/^  defp pad(4), do: "    "$/;"	f
parse	deps/earmark/lib/earmark.ex	/^  def parse(lines, options = %Options{mapper: mapper}) when is_list(lines) do$/;"	f
parse	deps/earmark/lib/earmark.ex	/^  def parse(lines, options \\\\ %Options{})$/;"	f
parse	deps/earmark/lib/earmark.ex	/^  def parse(lines, options) when is_binary(lines) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  def parse(lines) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [ %Line.Blank{} | rest ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [ %Line.Ial{attrs: attrs} | rest ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [ anything | rest ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [ defn = %Line.FnDef{id: _id} | rest ], result ) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [ defn = %Line.IdDef{title: title}, maybe_title | rest ], result)$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [ defn = %Line.IdDef{} | rest ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( [first = %Line.ListItem{type: type} | rest ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( lines = [ %Line.BlockQuote{} | _ ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( lines = [ %Line.TableLine{columns: cols1},$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( lines = [ %Line.TableLine{} | _ ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( lines = [ %Line.Text{} | _ ], result)$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse( list = [%Line.Indent{} | _], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([  %Line.Blank{},$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([ %Line.Heading{content: content, level: level} | rest ], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([ %Line.HtmlOneLine{line: line} | rest], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([ %Line.Ruler{type: type} | rest], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([ line = %Line.HtmlComment{complete: true} | rest], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([ opener = %Line.HtmlOpenTag{tag: tag} | rest], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([%Line.Fence{delimiter: delimiter, language: language} | rest], result) do$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse([], result), do: result     # consolidate also reverses, so no need$/;"	f
parse	deps/earmark/lib/earmark/block.ex	/^  defp parse(lines = [ %Line.HtmlComment{complete: false} | _], result) do$/;"	f
parse	deps/earmark/lib/earmark/parser.ex	/^  def parse(text_lines), do: parse(text_lines, false)$/;"	f
parse	deps/earmark/lib/earmark/parser.ex	/^  def parse(text_lines, options = %Earmark.Options{}, recursive \\\\ false) do$/;"	f
parse	deps/earmark/lib/earmark/parser.ex	/^  def parse(text_lines, recursive)$/;"	f
parse	deps/poison/lib/poison/parser.ex	/^  def parse(iodata, options \\\\ []) do$/;"	f
parse	lib/exkanji/mecab.ex	/^  def parse(_), do: {:error, "type error: need to set atom or string or binary in this argument"}$/;"	f
parse	lib/exkanji/mecab.ex	/^  def parse(text) when is_atom(text), do: parse(to_char_list(text))$/;"	f
parse	lib/exkanji/mecab.ex	/^  def parse(text) when is_binary(text), do: parse(to_char_list(text))$/;"	f
parse	lib/exkanji/mecab.ex	/^  def parse(text) when is_list(text) do$/;"	f
parse!	deps/poison/lib/poison/parser.ex	/^  def parse!(iodata, options \\\\ []) do$/;"	f
parse_args	deps/earmark/lib/earmark/cli.ex	/^  defp parse_args(argv) do$/;"	f
parse_args	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp parse_args([_, _, _ | _]) do$/;"	f
parse_args	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp parse_args([_project, _version, _source_beam] = args), do: args$/;"	f
parse_args	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp parse_args(_) do$/;"	f
parse_decimal_entity	deps/earmark/lib/earmark/helpers.ex	/^  defp parse_decimal_entity(";" <> rest, entity) do$/;"	f
parse_decimal_entity	deps/earmark/lib/earmark/helpers.ex	/^  defp parse_decimal_entity(<< ch :: utf8, rest :: binary>>, entity) do$/;"	f
parse_hex_entity	deps/earmark/lib/earmark/helpers.ex	/^  defp parse_hex_entity(";" <> rest, entity) do$/;"	f
parse_hex_entity	deps/earmark/lib/earmark/helpers.ex	/^  defp parse_hex_entity(<< ch :: utf8, rest :: binary>>, entity) do$/;"	f
parse_line	lib/exkanji/mecab.ex	/^  def parse_line(_), do: {:error, "cannot set mecab's line to %Exkanji.Mecab{}"}$/;"	f
parse_line	lib/exkanji/mecab.ex	/^  def parse_line(line) when is_binary(line) do$/;"	f
parse_stdout	deps/exromaji/lib/exromaji/translator.ex	/^  defp parse_stdout(outstring) do$/;"	f
peek	deps/earmark/lib/earmark/block.ex	/^  defp peek([], _, _), do: false$/;"	f
peek	deps/earmark/lib/earmark/block.ex	/^  defp peek([head | _], struct, type) do$/;"	f
pending_inline_code	deps/earmark/lib/earmark/helpers.ex	/^  def pending_inline_code( line ) do$/;"	f
pmap	deps/earmark/lib/earmark.ex	/^  def pmap(collection, func) do$/;"	f
pos_loop	deps/exromaji/lib/exromaji/translator.ex	/^  defp pos_loop(map, list), do: pos_loop(map, list, 3)$/;"	f
pos_loop	deps/exromaji/lib/exromaji/translator.ex	/^  defp pos_loop(map, list, num) do$/;"	f
prepare	lib/exkanji/mecab.ex	/^  defp prepare(text) do$/;"	f
prepare_cmd	deps/exromaji/lib/exromaji/translator.ex	/^  defp prepare_cmd(text) do$/;"	f
presence	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp presence([]),    do: nil$/;"	f
presence	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp presence(other), do: other$/;"	f
pretty	deps/poison/lib/poison/encoder.ex	/^      defp pretty(options) do$/;"	f
pretty_codeblocks	deps/ex_doc/lib/ex_doc/markdown.ex	/^  def pretty_codeblocks(bin) do$/;"	f
pretty_codeblocks	deps/ex_doc/lib/ex_doc/markdown/hoedown.ex	/^  defp pretty_codeblocks(bin) do$/;"	f
pretty_codeblocks	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  defp pretty_codeblocks(bin) do$/;"	f
pretty_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp pretty_type(%ExDoc.FunctionNode{type: t}) do$/;"	f
print	deps/inch_ex/lib/inch_ex/setup.ex	/^  def print(text, options \\\\ []) do$/;"	f
print_heading	deps/inch_ex/lib/inch_ex/setup.ex	/^  def print_heading(heading, options \\\\ []) do$/;"	f
print_usage	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp print_usage do$/;"	f
print_version	deps/inch_ex/lib/mix/tasks/inch.ex	/^  defp print_version do$/;"	f
process	deps/earmark/lib/earmark/cli.ex	/^  defp process(:help) do$/;"	f
process	deps/earmark/lib/earmark/cli.ex	/^  defp process(io_device) do$/;"	f
process_logo_metadata	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp process_logo_metadata(config) do$/;"	f
process_module	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp process_module(module, modules, aliases) do$/;"	f
process_port	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  defp process_port(port) do$/;"	f
process_type_ast	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp process_type_ast(ast, _), do: ast$/;"	f
process_type_ast	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp process_type_ast({:::, _, [d|_]}, :opaque), do: d$/;"	f
project	deps/earmark/mix.exs	/^  def project do$/;"	f
project	deps/ex_doc/mix.exs	/^  def project do$/;"	f
project	deps/exromaji/mix.exs	/^  def project do$/;"	f
project	deps/inch_ex/mix.exs	/^  def project do$/;"	f
project	deps/poison/mix.exs	/^  def project do$/;"	f
project	mix.exs	/^  def project do$/;"	f
project_doc	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def project_doc(bin, modules, module_id \\\\ nil) when is_binary(bin) do$/;"	f
project_functions	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def project_functions(bin, project_funs) when is_binary(bin) do$/;"	f
project_modules	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def project_modules(bin, modules, module_id \\\\ nil) when is_binary(bin) do$/;"	f
properly_indent	deps/earmark/lib/earmark/block.ex	/^  defp properly_indent(%Line.Indent{level: level, content: content}, target_level)$/;"	f
properly_indent	deps/earmark/lib/earmark/block.ex	/^  defp properly_indent(%{inside_code: true, line: line}, _level) do$/;"	f
properly_indent	deps/earmark/lib/earmark/block.ex	/^  defp properly_indent(line, _) do$/;"	f
raise_no_markdown_processor	deps/ex_doc/lib/ex_doc/markdown.ex	/^  defp raise_no_markdown_processor() do$/;"	f
read_config	deps/ex_doc/lib/ex_doc/cli.ex	/^  defp read_config(path) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Blank{} | rest ], result, false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Indent{line: text} | rest ], result, false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.TableLine{content: ( text = <<"  ", _ :: binary>> )} | rest ],$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.TableLine{line: text} | rest ], [], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.TableLine{line: text} | rest ], result =[ %Line.Indent{} | _], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.TableLine{line: text} | rest ], result =[ %Line.TableLine{} | _], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.TableLine{line: text} | rest ], result =[ %Line.Text{} | _], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Text{line: ( text = <<"  ", _ :: binary>> )} | rest ],$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Text{line: text} | rest ], [], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Text{line: text} | rest ], result =[ %Line.Indent{} | _], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Text{line: text} | rest ], result =[ %Line.TableLine{} | _], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([ line = %Line.Text{line: text} | rest ], result =[ %Line.Text{} | _], false) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([], result, opening_backquotes) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines([line|rest], result, opening_backquotes) do$/;"	f
read_list_lines	deps/earmark/lib/earmark/block.ex	/^  defp read_list_lines(lines, result, false) do$/;"	f
read_table	deps/earmark/lib/earmark/block.ex	/^  defp read_table( rest, col_count, %Table{rows: rows}) do$/;"	f
read_table	deps/earmark/lib/earmark/block.ex	/^  defp read_table([ %Line.TableLine{columns: cols} | rest ],$/;"	f
reference_link	deps/earmark/lib/earmark/inline.ex	/^  defp reference_link(context, match, alt_text, id) do$/;"	f
relative_asset	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp relative_asset([], _), do: nil$/;"	f
relative_asset	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp relative_asset([h|_], output), do: Path.relative_to(h, output)$/;"	f
remove_line_ending	deps/earmark/lib/earmark/helpers.ex	/^  def remove_line_ending(line) do$/;"	f
remove_old_doc	deps/earmark/tasks/readme.exs	/^  defp remove_old_doc(readme) do$/;"	f
remove_trailing_blank_lines	deps/earmark/lib/earmark/block.ex	/^  defp remove_trailing_blank_lines(lines) do$/;"	f
render	deps/earmark/lib/earmark/html_renderer.ex	/^  def render(blocks, context, map_func) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.BlockQuote{blocks: blocks, attrs: attrs}, context, mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Code{lines: lines, language: language, attrs: attrs}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.FnList{blocks: footnotes}, context, mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Heading{level: level, content: content, attrs: attrs}, context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.HtmlOther{html: html}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Html{html: html}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.IdDef{}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.ListItem{blocks: blocks, attrs: attrs}, context, mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.ListItem{blocks: blocks, spaced: false, attrs: attrs}, context, mf)$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.List{type: type, blocks: items, attrs: attrs}, context, mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Para{lines: lines, attrs: attrs}, context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Ruler{type: "*", attrs: attrs}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Ruler{type: "-", attrs: attrs}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Ruler{type: "_", attrs: attrs}, _context, _mf) do$/;"	f
render_block	deps/earmark/lib/earmark/html_renderer.ex	/^  def render_block(%Block.Table{header: header, rows: rows, alignments: aligns, attrs: attrs}, context, _mf) do$/;"	f
replace	deps/earmark/lib/earmark/helpers.ex	/^  def replace(text, regex, replacement, options \\\\ []) do$/;"	f
repo_https_url	deps/inch_ex/lib/inch_ex/git.ex	/^  def repo_https_url do$/;"	f
revision	deps/inch_ex/lib/inch_ex/git.ex	/^  def revision do$/;"	f
rewrite_git_ssh_url_to_https	deps/inch_ex/lib/inch_ex/git.ex	/^  defp rewrite_git_ssh_url_to_https(url) do$/;"	f
romaji	deps/exromaji/lib/exromaji.ex	/^  defdelegate romaji(text), to: Exromaji.Translator, as: :romaji$/;"	d
romaji	deps/exromaji/lib/exromaji/translator.ex	/^  def romaji(text) do$/;"	f
romaji	lib/exkanji/translator.ex	/^  def romaji(text) do$/;"	f
romaji2kana	deps/exromaji/lib/exromaji/tables.ex	/^  def romaji2kana, do: %{$/;"	f
rules_for	deps/earmark/lib/earmark/inline.ex	/^  defp rules_for(options) do$/;"	f
run	deps/earmark/tasks/readme.exs	/^  def run([]) do$/;"	f
run	deps/ex_doc/lib/ex_doc/cli.ex	/^  def run(args, generator \\\\ &ExDoc.generate_docs\/3) do$/;"	f
run	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  def run(module_nodes, config) when is_map(config) do$/;"	f
run	deps/ex_doc/lib/mix/tasks/docs.ex	/^  def run(args, config \\\\ Mix.Project.config, generator \\\\ &ExDoc.generate_docs\/3) do$/;"	f
run	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^  def run(modules, args, config)  do$/;"	f
run	deps/inch_ex/lib/inch_ex/reporter/local.ex	/^  def run(filename, args \\\\ []) do$/;"	f
run	deps/inch_ex/lib/inch_ex/reporter/remote.ex	/^  def run(filename, _) do$/;"	f
run	deps/inch_ex/lib/inch_ex/setup.ex	/^  def run(output) do$/;"	f
run	deps/inch_ex/lib/inch_ex/setup/readme_badge.ex	/^  def run(output) do$/;"	f
run	deps/inch_ex/lib/inch_ex/setup/travis_after_script.ex	/^  def run(_) do$/;"	f
run	deps/inch_ex/lib/mix/tasks/inch.ex	/^  def run(args, config \\\\ Mix.Project.config, generator \\\\ &InchEx.generate_docs\/4, reporter \\\\ InchEx.Reporter.Local) do$/;"	f
run	deps/inch_ex/lib/mix/tasks/inch_report.ex	/^  def run(_, config \\\\ Mix.Project.config, generator \\\\ &InchEx.generate_docs\/4, reporter \\\\ InchEx.Reporter.Remote) do$/;"	f
run	deps/inch_ex/lib/mix/tasks/inchci_add.ex	/^  def run(_) do$/;"	f
run?	deps/inch_ex/lib/inch_ex/setup/readme_badge.ex	/^  def run? do$/;"	f
run?	deps/inch_ex/lib/inch_ex/setup/travis_after_script.ex	/^  def run? do$/;"	f
save_as_json	deps/inch_ex/lib/inch_ex/docs/formatter.ex	/^  defp save_as_json(output, data) do$/;"	f
seq	deps/poison/lib/poison/encoder.ex	/^  defp seq(char) do$/;"	f
short_typespec?	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp short_typespec?(ast) do$/;"	f
sidebar_items_by_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_items_by_type({type, docs}) do$/;"	f
sidebar_items_extra	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_items_extra({id, title, headers}) do$/;"	f
sidebar_items_keys	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_items_keys({:extras, value}) do$/;"	f
sidebar_items_keys	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_items_keys({id, value}) do$/;"	f
sidebar_items_node	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_items_node(node) do$/;"	f
sidebar_items_object	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_items_object(id, anchor) do$/;"	f
sidebar_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_type(:behaviour), do: "modules"$/;"	f
sidebar_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_type(:exception), do: "exceptions"$/;"	f
sidebar_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_type(:extra), do: "extras"$/;"	f
sidebar_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_type(:module), do: "modules"$/;"	f
sidebar_type	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp sidebar_type(:protocol), do: "protocols"$/;"	f
skip_whitespace	deps/poison/lib/poison/parser.ex	/^  defp skip_whitespace(<<char>> <> rest) when char in '\\s\\n\\t\\r' do$/;"	f
skip_whitespace	deps/poison/lib/poison/parser.ex	/^  defp skip_whitespace(string), do: string$/;"	f
smartypants	deps/earmark/lib/earmark/inline.ex	/^  def smartypants(text) do$/;"	f
source_link	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp source_link(_source_path, nil, _line), do: nil$/;"	f
source_link	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp source_link(source_path, source_url, line) do$/;"	f
source_link	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp source_link(source_path, _source_url, line) do$/;"	f
source_path	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp source_path(module, config) do$/;"	f
source_path	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp source_path(module, config) do$/;"	f
spaces	deps/poison/lib/poison/encoder.ex	/^      defp spaces(count) do$/;"	f
split_function	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp split_function("c:" <> bin) do$/;"	f
split_function	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp split_function(bin) do$/;"	f
split_table_columns	deps/earmark/lib/earmark/line.ex	/^  defp split_table_columns(line) do$/;"	f
still_pending_inline_code	deps/earmark/lib/earmark/helpers.ex	/^  def still_pending_inline_code( line, opening_backquotes ) do$/;"	f
strikethrough	deps/earmark/lib/earmark/html_renderer.ex	/^  def strikethrough(text), do: "<del>#{text}<\/del>"$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size("\\"" <> _, acc), do: acc$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size("\\\\" <> _, acc), do: acc$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(<<char>> <> rest, acc) when char < 0x80 do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(<<codepoint :: utf8>> <> rest, acc) do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(other, _), do: syntax_error(other)$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(_),                                  do: 4$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(codepoint) when codepoint < 0x10000, do: 3$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(codepoint) when codepoint < 0x800,   do: 2$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("", _), do: throw(:invalid)$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("\\"" <> rest, acc) do$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("\\\\" <> rest, acc) do$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue(string, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^    defp string_escape(<<unquote(seq)>> <> rest, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(<<?u, a1, b1, c1, d1, "\\\\u", a2, b2, c2, d2>> <> rest, acc)$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(<<?u, seq :: binary-size(4)>> <> rest, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(other, _), do: syntax_error(other)$/;"	f
string_to_list	deps/earmark/lib/earmark.ex	/^  defp string_to_list(document) do$/;"	f
strip_parens	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp strip_parens(string, []) do$/;"	f
strip_parens	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp strip_parens(string, _), do: string$/;"	f
strip_types	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp strip_types(args, arity) do$/;"	f
strong	deps/earmark/lib/earmark/html_renderer.ex	/^  def strong(text),        do: "<strong>#{text}<\/strong>"$/;"	f
synopsis	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def synopsis(""),  do: ""$/;"	f
synopsis	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def synopsis(doc) when is_bitstring(doc) do$/;"	f
synopsis	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  def synopsis(nil), do: nil$/;"	f
syntax_error	deps/poison/lib/poison/parser.ex	/^  defp syntax_error(<<token :: utf8>> <> _) do$/;"	f
syntax_error	deps/poison/lib/poison/parser.ex	/^  defp syntax_error(_) do$/;"	f
templates_path	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp templates_path(patterns) do$/;"	f
text_to_file	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  defp text_to_file(text) do$/;"	f
textify	deps/inch_ex/lib/inch_ex/setup/readme_badge.ex	/^  defp textify(badge_url) do$/;"	f
textify	deps/inch_ex/lib/inch_ex/setup/travis_after_script.ex	/^  defp textify() do$/;"	f
title_to_filename	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp title_to_filename(title) do$/;"	f
to_html	deps/earmark/lib/earmark.ex	/^  def to_html(lines, options = %Options{}) when is_list(lines) do$/;"	f
to_html	deps/earmark/lib/earmark.ex	/^  def to_html(lines, options \\\\ %Options{})$/;"	f
to_html	deps/earmark/lib/earmark.ex	/^  def to_html(lines, options) when is_binary(lines) do$/;"	f
to_html	deps/earmark/lib/earmark.ex	/^  def to_html({blocks, context = %Context{}}, %Options{renderer: renderer, mapper: mapper}=_options) do$/;"	f
to_html	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp to_html(bin) when is_binary(bin), do: ExDoc.Markdown.to_html(bin)$/;"	f
to_html	deps/ex_doc/lib/ex_doc/formatter/html/templates.ex	/^  defp to_html(nil), do: nil$/;"	f
to_html	deps/ex_doc/lib/ex_doc/markdown.ex	/^  def to_html(text) when is_binary(text) do$/;"	f
to_html	deps/ex_doc/lib/ex_doc/markdown/cmark.ex	/^  def to_html(text, _opts \\\\ []) do$/;"	f
to_html	deps/ex_doc/lib/ex_doc/markdown/earmark.ex	/^  def to_html(text, opts \\\\ []) do$/;"	f
to_html	deps/ex_doc/lib/ex_doc/markdown/hoedown.ex	/^  def to_html(text, opts \\\\ []) do$/;"	f
to_html	deps/ex_doc/lib/ex_doc/markdown/pandoc.ex	/^  def to_html(text, opts \\\\ []) when is_binary(text) do$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var(_, i),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var(atom, _) when is_atom(atom),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var(float, _) when is_integer(float),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var(integer, _) when is_integer(integer),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var(list, _) when is_list(list),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var({:%{}, _, _}, _),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var({:<<>>, _, _}, _),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var({:{}, _, _}, _),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var({_, _}, _),$/;"	f
to_var	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp to_var({name, meta, _}, _) when is_atom(name),$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(nil, _keys, _as, _options), do: nil$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, _keys, _as, _options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, %{__struct__: _} = as, options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, [as], options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, as, options) when is_map(as) do$/;"	f
transform_map	deps/poison/lib/poison/decoder.ex	/^  defp transform_map(value, keys, as, options) do$/;"	f
transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp transform_struct(value, keys, as, options) do$/;"	f
transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp transform_struct(value, keys, as, options) when keys in [:atoms, :atoms!] do$/;"	f
travis?	deps/inch_ex/lib/inch_ex/env.ex	/^  def travis? do$/;"	f
type_of	deps/earmark/lib/earmark/line.ex	/^  def type_of(line, options = %Earmark.Options{}, recursive) do$/;"	f
type_of	deps/earmark/lib/earmark/line.ex	/^  def type_of(line, recursive)$/;"	f
typespec	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def typespec(other, typespecs, aliases) do$/;"	f
typespec	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def typespec({:::, _, [left, {:|, _, _} = center]} = ast, typespecs, aliases) do$/;"	f
typespec	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  def typespec({:when, _, [{:::, _, [left, {:|, _, _} = center]}, right]} = ast, typespecs, aliases) do$/;"	f
typespec_to_string	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp typespec_to_string(ast, typespecs, aliases) do$/;"	f
typespec_with_new_line	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp typespec_with_new_line(other, typespecs, aliases) do$/;"	f
typespec_with_new_line	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp typespec_with_new_line({:|, _, [left, right]}, typespecs, aliases) do$/;"	f
unescape	deps/earmark/lib/earmark/helpers.ex	/^  def unescape(html), do: unescape(html, [])$/;"	f
unescape	deps/earmark/lib/earmark/helpers.ex	/^  defp unescape("", result) do$/;"	f
unescape	deps/earmark/lib/earmark/helpers.ex	/^  defp unescape("&#" <> rest, result) do$/;"	f
unescape	deps/earmark/lib/earmark/helpers.ex	/^  defp unescape("&#x" <> rest, result) do$/;"	f
unescape	deps/earmark/lib/earmark/helpers.ex	/^  defp unescape("&colon;" <> rest, result) do$/;"	f
unescape	deps/earmark/lib/earmark/helpers.ex	/^  defp unescape(<< ch :: utf8, rest :: binary>>, result) do$/;"	f
unknown?	deps/inch_ex/lib/inch_ex/env.ex	/^  def unknown? do$/;"	f
unknown_ci?	deps/inch_ex/lib/inch_ex/env.ex	/^  def unknown_ci? do$/;"	f
update_context	deps/earmark/lib/earmark/inline.ex	/^  def update_context(context =  %Context{options: options}) do$/;"	f
valid?	deps/inch_ex/lib/inch_ex/reporter/remote.ex	/^  defp valid? do$/;"	f
valid?	deps/inch_ex/lib/inch_ex/reporter/remote.ex	/^  defp valid?(:circleci) do$/;"	f
valid?	deps/inch_ex/lib/inch_ex/reporter/remote.ex	/^  defp valid?(:travis) do$/;"	f
valid_erlang_beam?	deps/ex_doc/lib/ex_doc/formatter/html/autolink.ex	/^  defp valid_erlang_beam?(function_str, lib_dir) do$/;"	f
valid_extension_name?	deps/ex_doc/lib/ex_doc/formatter/html.ex	/^  defp valid_extension_name?(input) do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("[" <> rest, keys),      do: array_values(skip_whitespace(rest), keys, [])$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("\\"" <> rest, _keys),    do: string_continue(rest, [])$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("false" <> rest, _keys), do: {false, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("null" <> rest, _keys),  do: {nil, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("true" <> rest, _keys),  do: {true, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("{" <> rest, keys),      do: object_pairs(skip_whitespace(rest), keys, [])$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value(<<char, _ :: binary>> = string, _keys) when char in '-0123456789' do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value(other, _keys), do: syntax_error(other)$/;"	f
verify_module	deps/ex_doc/lib/ex_doc/retriever.ex	/^  defp verify_module(module) do$/;"	f
verify_module	deps/inch_ex/lib/inch_ex/docs/retriever.ex	/^  defp verify_module(module) do$/;"	f
version	deps/ex_doc/lib/ex_doc.ex	/^  def version, do: @ex_doc_version$/;"	f
visit	deps/earmark/lib/earmark/block.ex	/^  def visit([ item = %BlockQuote{blocks: blocks} | rest], result, func) do$/;"	f
visit	deps/earmark/lib/earmark/block.ex	/^  def visit([ item = %ListItem{blocks: blocks} | rest], result, func) do$/;"	f
visit	deps/earmark/lib/earmark/block.ex	/^  def visit([ item = %List{blocks: blocks} | rest], result, func) do$/;"	f
visit	deps/earmark/lib/earmark/block.ex	/^  def visit([ item | rest], result, func) do$/;"	f
visit	deps/earmark/lib/earmark/block.ex	/^  def visit([], result, _func), do: result$/;"	f
write_back	deps/earmark/tasks/readme.exs	/^  defp write_back(readme) do$/;"	f
